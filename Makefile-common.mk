# DO NOT EDIT THIS FILE.
# It is automatically synchronized with golang-libraries.

.DEFAULT_GOAL=noop
.DELETE_ON_ERROR:

.PHONY: noop
noop:

CI?=false

ENSURE_COMMAND=@ which $(1) > /dev/null || (echo "Install the '$(1)' command. $(2)"; exit 1)

VERSION?=$(shell (git describe --tags --exact-match 2> /dev/null || git rev-parse HEAD) | sed "s/^v//")
.PHONY: version
version:
	@echo $(VERSION)

GITHUB_TOKEN?=$(error missing GITHUB_TOKEN)
.PHONY: github-auth
github-auth:
	git config --global url."https://$(GITHUB_TOKEN)@github.com/".insteadOf "https://github.com/"

.PHONY: install-dependencies
install-dependencies::

DOWNLOAD_GEOLITE2_DATABASE=\
curl -vfL "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&suffix=tar.gz&license_key=G5WlxBuOnklvjd8T" | tar -xz -C $(1) &&\
mv $(1)/GeoLite2-City_*/GeoLite2-City.mmdb $(1)/ &&\
rm -r $(1)/GeoLite2-City_*

.PHONY: test
test: install-dependencies
	go test -v -cover -coverprofile=coverage.out ./...
	go tool cover -func=coverage.out -o=coverage.txt
	cat coverage.txt
	go tool cover -html=coverage.out -o=coverage.html

.PHONY: generate
generate::
	go generate -v ./...

.PHONY: lint
lint::
	$(MAKE) lint-rules
	$(MAKE) golangci-lint

GOLANGCI_LINT_VERSION=v1.38.0
GOLANGCI_LINT_DIR=$(shell go env GOPATH)/pkg/golangci-lint/$(GOLANGCI_LINT_VERSION)
GOLANGCI_LINT_BIN=$(GOLANGCI_LINT_DIR)/golangci-lint
$(GOLANGCI_LINT_BIN):
	curl -vfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(GOLANGCI_LINT_DIR) $(GOLANGCI_LINT_VERSION)

.PHONY: install-golangci-lint
install-golangci-lint: $(GOLANGCI_LINT_BIN)

.PHONY: golangci-lint
golangci-lint: install-golangci-lint
ifneq ($(CI),true)
	$(GOLANGCI_LINT_BIN) -v run
else
# Run 2 times in order to provide a human-readable output if there is an error.
	$(GOLANGCI_LINT_BIN) -v run --out-format=github-actions || $(GOLANGCI_LINT_BIN) -v run
endif

.PHONY: lint-rules
lint-rules:: ensure-command-pcregrep
	# Disallowed files.
	find . -name ".DS_Store" | xargs -n 1 -I {} sh -c 'echo {} && false'

	# Mandatory files.
	[ -e .gitignore ]
	[ -e CODEOWNERS ]
	[ -e README.md ]
	[ -e .github/workflows/ci.yml ]
	[ -e go.mod ]
	[ -e go.sum ]
	[ -e .golangci.yml ]
	[ -e Makefile ]
	[ -e Makefile-common.mk ]
	[ -e Makefile-project.mk ]

	# Don't use upper case letter in file and directory name.
	# The convention for separator in name is:
	# - file: "_"
	# - directory in "/cmd": "-"
	# - other directory: shouldn't be separated
	! find . -name "*.go" | pcregrep "[[:upper:]]"

	# A text file must end with a new line.
	! pcregrep -rMLI --exclude-dir="^\.(git|idea)$$" "\\n\\Z" .
	# A text file line must not end with a space character.
	! pcregrep -rnI --exclude-dir="^\.(git|idea)$$" --exclude="^coverage\.html$$" "\s$$" .

	# Don't use more than 2 block of packages in an import statement.
	! pcregrep -rnM --include=".+\.go$$" "import \(\n([\t \w\"/.-]+\n)+(\n([\t \w\"/.-]+\n)+){2,}\)" .
	# Don't use more than 1 import statement.
	! pcregrep -rnM --include=".+\.go$$" "((.*\n)+import){2,}" .

	# Don't export type/function/variable/constant in main package/test.
	! pcregrep -rnM --include=".+\.go$$" --exclude=".+_test\.go$$" "^package main\n(.*\n)*(type|func|var|const) [[:upper:]]" .
	! pcregrep -rnM --include=".+\.go$$" --exclude=".+_test\.go$$" "^package main\n(.*\n)*(var|const) \(\n((\t.*)?\n)*\t[[:upper:]]" .
	! pcregrep -rn --include=".+_test\.go$$" "^(type|var|const) [[:upper:]]" .
	! pcregrep -rnM --include=".+_test\.go$$" "^(var|const) \(\n((\t.*)?\n)*\t[[:upper:]]" .
	! pcregrep -rn --include=".+_test\.go$$" "^func [[:upper:]]" . | pcregrep -v ":func (Test|Benchmark).*\((t|b) \*testing\.(T|B)\) {"

	# Write meaningful comments instead of "...".
	! pcregrep -rn --include=".+\.go$$" "\/\/.*\.\.\.$$" .

	# Don't add a space after "//nolint:"
	! pcregrep -rnF --include=".+\.go$$" "//nolint: " .

	# Don't declare a var block inside a function.
	! pcregrep -rn --include=".+\.go$$" "^\t+var \($$" .

	# Use golang-libraries/goroutine instead of "go".
	! pcregrep -rn --include=".+\.go$$" --exclude=".+_test\.go" --exclude-dir="^goroutine$$" "^\s+go\s" .

	# Call golang-libraries/panichandler.Recover() with defer.
	! pcregrep -rnF --include=".+\.go$$" "panichandler.Recover()" . | pcregrep -vF "defer"

	# Use github.com/siddhant2408/golang-libraries/errors.Newf() instead of fmt.Errorf().
	! pcregrep -rnF --include=".+\.go$$" --exclude-dir="^ravenerrors$$" "fmt.Errorf(" .
	# Don't try to inspect the content of an error message. It can change anytime and break your code.
	! pcregrep -rnF --include=".+\.go$$" "strings.Contains" . | pcregrep -F "err.Error()"
	# errors.WithValue()|WithTag*() key must be: lower case, word separated with "_", hierachical elements separated with ".".
	! pcregrep -rn --include=".+\.go$$" "errors\.(WithValue|WithTag.*)\(.+, \".*[\s\p{Lu}\-].*\", .+\)" .
	# Use errors.Wrap()|Wrapf() before httperrors.WithServerCode().
	! pcregrep -rnM --include=".+\.go$$" "httperrors\.WithServerCode\(.+\n.+errors\.Wrap(f)?\(" .
	! pcregrep -rnM --include=".+\.go$$" "errors\.Wrap\((\n\t+)?httperrors\.WithServerCode\(" .

	# Don't use context.TODO().
	! pcregrep -rnF --include=".+\.go$$" "context.TODO()" .

	# Use testutils helper functions for errors. They provide better error formatting.
	! pcregrep -rn --include=".+_test\.go$$" "(b|t|tb)\.(Error|Fatal|Log|Skip)\(err\)" .
	! pcregrep -rnM --include=".+_test\.go$$" "if err != nil \{\n\t+(t|b|tb|fmt)\." .
	# Use testutils.TempDir()|TempFile() instead of os.MkdirTemp()|CreateTemp() in tests.
	! pcregrep -rn --include=".+_test\.go$$" "os\.(Mkdir|Create)Temp\(" .
	# Use testutils.Compare() instead of reflect.DeepEqual() in tests.
	! pcregrep -rnF --include=".+_test\.go$$" "reflect.DeepEqual(" .
	# For nil error do `t.Fatal("no error")` instead of using testutils.
	! pcregrep -rnM --include=".+_test\.go$$" "if err == nil \{\n.+testutils\." .
	# Use testing package functions instead of creating a new error and calling testutils functions.
	! pcregrep -rn --include=".+_test\.go$$" "testutils\.(Fatal|Error|Skip|Log)Err\(.+errors.New(f)?\(" .

	# Use timeutils.Now() instead of time.Now(). It allows to fake the current time in tests.
	! pcregrep -rnF --include=".+\.go$$" --exclude-dir="^timeutils$$" "time.Now()" .
	# Use timeutils.LoadLocation() instead of time.LoadLocation(). It caches the loaded locations, which is faster and decreases the memory allocations.
	# ! pcregrep -rnF --include=".+\.go$$" --exclude-dir="^timeutils$$" "time.LoadLocation" .

	# Use httptest.NewRequest() instead of http.NewRequest() in tests.
	! pcregrep -rnF --include=".+_test\.go$$" --exclude-dir="^httpclientrequest$$" "http.NewRequest(" .
	# Don't use http.DefaultServeMux directly or indirectly.
	! pcregrep -rn --include=".+\.go$$" --exclude-dir="^debugutils$$" "http\.(Handle\(|HandleFunc\(|DefaultServeMux)" .
	# Use httpclientrequest instead of http.DefaultClient|Get()|Head()|Post()|PostForm().
	! pcregrep -rn --include=".+\.go$$" --exclude-dir="^httpclientrequest$$" "http\.(DefaultClient|Get\(|Head\(|Post\(|PostForm\()" . | grep -vF "TODO"

	# Don't use JSON "omitempty" with a `time.Time` because it has no zero value. Convert it to a pointer or remove omitempty.
	! pcregrep -rn --include=".+\.go$$" "\stime.Time\s+\`.*json:\".*omitempty.*\`" .

	# Use mgobsonutils.ParseObjectIdHex() instead of bson.ObjectIdHex().
	! pcregrep -rnF --include=".+\.go$$" --exclude-dir="^mgobsonutils$$" "bson.ObjectIdHex" .
	# Use MongoDB options constructors and setters instead of the struct.
	! pcregrep -rn --include=".+\.go$$" "&options\.\w+Options\{" .

	# Use constructors from golang-libraries/redisutils.
	! pcregrep -rn --include=".+\.go$$" --exclude-dir="^redis(test|utils)$$" "redis\.New(Client|FailoverClient|ClusterClient|FailoverClusterClient|Ring|SentinelClient|UniversalClient)\(" .

	# Use jsonlog.NewErrorOptionalFile().
	! pcregrep -rn --include=".+\.go$$" "jsonlog\.(New|NewFile|NewOptionalFile)\(" .

	# Write test for the DI container.
	find . -type f -name "di.go" | sed "s/di\.go/di_test\.go/" | xargs cat > /dev/null

.PHONY: mod-update
mod-update:
	go get -v -u -d all
	$(MAKE) mod-tidy

.PHONY: mod-tidy
mod-tidy:
	rm -f go.sum
	go mod tidy -v

.PHONY: git-latest-release
git-latest-release:
	@git tag --list --sort=v:refname --format="%(refname:short) => %(creatordate:short)" | tail -n 1

.PHONY: clean
clean::
	git clean -fdX
	go clean -cache -testcache

.PHONY: ensure-command-pcregrep
ensure-command-pcregrep:
	$(call ENSURE_COMMAND,pcregrep,)

ifeq ($(CI),true)

# Fail test if the service is unavailable.
export TESTUTILS_UNAVAILABLE_SKIP=false
# Give more time to MongoDB connection.
export MONGOTEST_CONNECT_TIMEOUT=30s
# Skip if Kafka is unavailable, because it's complex to install.
export KAFKATEST_UNAVAILABLE_SKIP=true

CI_LOG_GROUP_START=@echo "::group::$(1)"
CI_LOG_GROUP_END=@echo "::endgroup::"

.PHONY: ci
ci::
	$(call CI_LOG_GROUP_START,apt)
	$(MAKE) ci-apt
	$(call CI_LOG_GROUP_END)

	$(call CI_LOG_GROUP_START,services)
	$(MAKE) ci-services
	$(call CI_LOG_GROUP_END)

	$(call CI_LOG_GROUP_START,Github auth)
	$(MAKE) github-auth
	$(call CI_LOG_GROUP_END)

CI_APT_PACKAGES:=pcregrep
.PHONY: ci-apt
ci-apt:
	sudo apt-get update
	sudo apt-get install $(CI_APT_PACKAGES)

.PHONY: ci-services
ci-services::

.PHONY: ci-service-clickhouse
ci-service-clickhouse:
	docker container run --rm --detach --net=host --name=clickhouse yandex/clickhouse-server:latest

.PHONY: ci-service-mongodb
ci-service-mongodb:
	docker container run --rm --detach --net=host --name=mongo mongo:latest

.PHONY: ci-service-mysql
ci-service-mysql:
	docker container run --rm --detach --net=host -e MYSQL_ALLOW_EMPTY_PASSWORD=yes --name=mysql mysql:latest

.PHONY: ci-service-rabbitmq
ci-service-rabbitmq:
	docker container run --rm --detach --net=host --name=rabbitmq rabbitmq:management-alpine

.PHONY: ci-service-redis
ci-service-redis:
	docker container run --rm --detach --net=host --name=redis redis:alpine

endif # CI end
